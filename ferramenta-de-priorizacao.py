# app.py (vers√£o com fonte personalizada Montserrat)

import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import gspread
from google.oauth2.service_account import Credentials
import io

# --- Configura√ß√£o da P√°gina e Tema Visual ---
st.set_page_config(page_title="Matriz de Prioriza√ß√£o de Projetos", page_icon="üìä", layout="wide", initial_sidebar_state="expanded")

# Injeta CSS para aplicar o tema de cores e a NOVA FONTE
st.markdown("""
<style>
    /* Importa a fonte Montserrat do Google Fonts */
    @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap');

    /* Aplica a nova fonte a todos os elementos da aplica√ß√£o */
    html, body, [class*="st-"], [class*="css-"] {
        font-family: 'Montserrat', sans-serif;
    }

    /* Cor de fundo da aplica√ß√£o principal */
    .main {
        background-color: #FFFFFF;
    }
    /* Cor de fundo da barra lateral */
    [data-testid="stSidebar"] {
        background-color: #f79433; /* Cor secund√°ria */
    }
    /* Cor do texto na barra lateral */
    [data-testid="stSidebar"] * {
        color: #191e50; /* Cor prim√°ria para o texto */
    }
    /* Cor do texto DENTRO dos campos de input para preto */
    [data-testid="stSidebar"] input, [data-testid="stSidebar"] textarea {
        color: #000000 !important;
    }
    /* Cor dos t√≠tulos principais na p√°gina */
    h1, h2, h3 {
        color: #191e50; /* Cor prim√°ria */
        font-family: 'Montserrat', sans-serif; /* Garante que os t√≠tulos tamb√©m usem a fonte */
    }
    /* Estilo dos bot√µes */
    .stButton>button {
        color: #FFFFFF;
        background-color: #191e50; /* Cor prim√°ria nos bot√µes */
        border: none;
        border-radius: 5px;
        padding: 10px 24px;
        width: 100%;
        font-family: 'Montserrat', sans-serif;
    }
    .stButton>button:hover {
        background-color: #2b3380;
        color: #FFFFFF;
    }
    /* Estilo dos expanders */
    .st-expander-header {
        font-size: 1.1em !important;
        font-weight: bold !important;
        color: #191e50 !important;
        font-family: 'Montserrat', sans-serif;
    }
</style>
""", unsafe_allow_html=True)


# --- Fun√ß√µes de Conex√£o com o Google Sheets ---
@st.cache_resource(ttl=300)
def connect_gsheets():
    try:
        scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
        creds_dict = st.secrets["gcp_service_account"].to_dict()
        creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        sa = gspread.authorize(creds)
        sheet = sa.open("Base de Dados - Ferramenta de Prioriza√ß√£o")
        return sheet.worksheet("Sheet1")
    except Exception as e:
        st.error(f"Erro Cr√≠tico ao conectar: {e}")
        return None

@st.cache_data(ttl=60)
def get_data_from_gsheets():
    worksheet = connect_gsheets()
    if worksheet is None: return pd.DataFrame()
    try:
        data = worksheet.get_all_records()
        df = pd.DataFrame(data)
        if 'demanda_legal' in df.columns:
            df['demanda_legal'] = df['demanda_legal'].apply(lambda x: True if str(x).upper() == 'TRUE' else False)
        return df
    except Exception:
        return pd.DataFrame()

def find_row_by_id(worksheet, project_id):
    try:
        cell = worksheet.find(str(project_id), in_column=1)
        return cell.row
    except (gspread.exceptions.CellNotFound, AttributeError):
        return None

def update_projeto(worksheet, project_id, data_row):
    row_number = find_row_by_id(worksheet, project_id)
    if row_number:
        try:
            headers = worksheet.row_values(1)
            update_values = [data_row.get(h, '') for h in headers]
            worksheet.update(f'A{row_number}', [update_values])
            return True
        except Exception as e:
            st.error(f"Erro ao atualizar o projeto: {e}")
            return False
    return False

def delete_projeto(worksheet, project_id):
    row_number = find_row_by_id(worksheet, project_id)
    if row_number:
        try:
            worksheet.delete_rows(row_number)
            return True
        except Exception as e:
            st.error(f"Erro ao excluir o projeto: {e}")
            return False
    return False

def gravar_projeto(worksheet, data_row):
    try:
        all_ids = worksheet.col_values(1)[1:]
        all_ids = [int(i) for i in all_ids if str(i).isdigit()]
        next_id = max(all_ids) + 1 if all_ids else 1
        data_row['ID'] = next_id
        
        headers = worksheet.row_values(1)
        new_row_ordered = [data_row.get(h, '') for h in headers]
        worksheet.append_row(new_row_ordered)
        return True
    except Exception as e:
        st.error(f"Erro ao gravar o novo projeto: {e}")
        return False

# --- Dicion√°rios e Fun√ß√µes de C√°lculo ---
MAPA_ALINHAMENTO = {"Desconectado da estrat√©gia da empresa": 1, "Levemente conectado a temas operacionais": 2, "Conectado a um objetivo estrat√©gico secund√°rio": 3, "Atende diretamente um objetivo estrat√©gico priorit√°rio": 4, "√â essencial para a execu√ß√£o de uma frente estrat√©gica central": 5}
MAPA_EBITDA = {"Nenhum impacto financeiro estim√°vel": 1, "Impacto operacional localizado e dif√≠cil de quantificar": 2, "Gera√ß√£o de efici√™ncia escal√°vel ou corte de custos moderado": 3, "Aumento de receita ou economia > R$ 500k/ano": 4, "Impacto financeiro direto, claro, e potencial multimilion√°rio": 5}
MAPA_COMPLEXIDADE = {"Solu√ß√£o simples, com dados e l√≥gica prontos": 1, "Requer pequenas transforma√ß√µes ou integra√ß√µes": 2, "Demanda uso de modelos b√°sicos, m√∫ltiplas fontes": 3, "Envolve arquitetura complexa, pipelines robustos": 4, "Alto risco t√©cnico, depend√™ncia de tecnologias emergentes": 5}
MAPA_CUSTO = {"Entreg√°vel em at√© 2 semanas com equipe atual": 1, "Exige at√© 1 m√™s com recursos existentes": 2, "Precisa de squad dedicado por mais de 1 m√™s": 3, "Necessita or√ßamento adicional, contrata√ß√£o ou servi√ßos externos": 4, "Alto custo recorrente e/ou necessidade de aquisi√ß√£o relevante": 5}
MAPA_ENGAJAMENTO = {"√Årea requisitante ausente ou passiva": 1, "Pouco engajamento, sem interlocutor fixo": 2, "Engajamento espor√°dico e reativo": 3, "Existe Data Owner claro e colaborativo": 4, "Cocria√ß√£o ativa com lideran√ßa da √°rea e patroc√≠nio executivo": 5}
MAPA_DEPENDENCIA = {"Nenhum fornecedor envolvido. Tudo interno": 1, "Fornecedor envolvido, mas contrato vigente e servi√ßos maduros": 2, "Alguma depend√™ncia de entregas de terceiros, com SLA razo√°vel": 3, "Depend√™ncia cr√≠tica de fornecedor espec√≠fico, sem redund√¢ncia": 4, "Fornecedores m√∫ltiplos, novos ou inst√°veis, com risco de travamento": 5}

def processar_dataframe(df):
    if df.empty: return df

    mapas = {'alinhamento': MAPA_ALINHAMENTO, 'ebitda': MAPA_EBITDA, 'complexidade': MAPA_COMPLEXIDADE, 'custo': MAPA_CUSTO, 'dependencia': MAPA_DEPENDENCIA}
    for col_db, mapa in mapas.items():
        if col_db in df.columns:
            df[f'score_{col_db}'] = df[col_db].map(mapa)
    if 'engajamento' in df.columns:
        df['score_engajamento'] = 6 - df['engajamento'].map(MAPA_ENGAJAMENTO)

    df['Nota Impacto'] = df[['score_alinhamento', 'score_ebitda']].mean(axis=1)
    df['Nota Esfor√ßo'] = df[['
